package com.sample
 
import com.sample.DroolsTest.Message;
import function herramientas.Registro.pantalla;
import model.*;
import model.InfoAbstractaCliente.RangoEdad;
import model.InfoAbstractaCliente.Riesgo;
import criterios.*;
import criterios.CriteriosAplicables;
import criterios.CriteriosAplicables.Capacidad;
import function herramientas.OperacionesConjuntos.interseccion;
import function herramientas.OperacionesConjuntos.interseccionIntereses;
import function herramientas.OperacionesConjuntos.tamanoConjunto;
import function herramientas.OperacionesConjuntos.tamanoConjuntoInteres;

// Regla de validacion de capacidad de pago del cliente para realizar la actividad
rule "Regla criterio 1"
  ruleflow-group "verifica"
  lock-on-active true
  when
  	$cliente: Cliente($costeMax: getInfoPersonal().getCosteMax());
  	$actividad: Actividad($costeMax >= getCoste());
  	$capacidadPago: CriteriosAplicables(getTipoCriterio() == Capacidad.Pago, !getEstado().equals("no aplicable"))
  then
    modify($capacidadPago){verificar();}
    modify($capacidadPago){activar();}
    pantalla( "Validacion Pago: "+ $capacidadPago.isVerificado());
end

// Regla de validacion: Relajamos las condiciones de pago para aquellos clientes jóvenes o mayores.”
rule "Regla criterio 2"
  ruleflow-group "verifica"
  lock-on-active true
  when
  	Cliente( getInfoAbstracta().getRangoEdad() == RangoEdad.Joven ||
  						getInfoAbstracta().getRangoEdad() == RangoEdad.Mayor);
  	Actividad($costeActividad: getCoste())
  	Cliente( getInfoPersonal().getCosteMax() >= $costeActividad*0.8);
  	$capacidadPago: CriteriosAplicables(getTipoCriterio() == Capacidad.Pago, !getEstado().equals("no aplicable"))
  then
    modify($capacidadPago){verificar();}
    modify($capacidadPago){activar();}
    pantalla( "Validacion Pago relajado: "+ $capacidadPago.isVerificado());
end

// Regla de validacion: Comprobamos que el cliente disponga al menos de un idioma utilizado en la actividad a realizar.”
rule "Regla criterio 3"
  ruleflow-group "verifica"
  lock-on-active true
  when
  	Actividad( $idiomasActividad: getIdioma());
	Cliente( $idiomasCliente: getInfoPersonal().getIdiomas());
	eval(tamanoConjunto(interseccion($idiomasActividad,$idiomasCliente)) >= 1)
  	$capacidadIdioma: CriteriosAplicables(getTipoCriterio() == Capacidad.Idioma, !getEstado().equals("no aplicable"))
  then
    modify($capacidadIdioma){verificar();}
    modify($capacidadIdioma){activar();}
    pantalla( "Validacion idiomas: "+ $capacidadIdioma.isVerificado());
end

// Regla de validacion: Comprobamos que el cliente disponga de capacidad deportiva para hacer la actividad.”
rule "Regla criterio 4"
  ruleflow-group "verifica"
  lock-on-active true
  when
	Cliente( getInfoAbstracta().isCapacidadDeportiva());
	$capacidadDeportiva: CriteriosAplicables(getTipoCriterio() == Capacidad.Deportiva, !getEstado().equals("no aplicable"))
  then
    modify($capacidadDeportiva){verificar();}
    modify($capacidadDeportiva){activar();}
    pantalla( "Validacion Deporte: "+ $capacidadDeportiva.isVerificado());
end

// Regla de validacion: Obtiene el número de intereses en común entre el cliente y la actividad a realizar.”
rule "Regla criterio 6"
  ruleflow-group "verifica"
  lock-on-active true
  when
  	Cliente($intereses: getAficiones().getIntereses());
  	Actividad($tipoActividad: getTipo());
	eval(tamanoConjuntoInteres($intereses) >= 1);
	eval(tamanoConjuntoInteres($tipoActividad) >= 1);
	$interesesComun: CriteriosAplicables(getTipoCriterio() == Capacidad.Intereses, !getEstado().equals("no aplicable"))
  then
    modify($interesesComun){setnComunes(tamanoConjuntoInteres(interseccionIntereses($intereses,$tipoActividad)));}
    modify($interesesComun) {verificar();}
    modify($interesesComun){activar();}
    pantalla( "Validacion Intereses común: "+ $interesesComun.isVerificado() + " intereses comun: " + $interesesComun.getnComunes());
end




